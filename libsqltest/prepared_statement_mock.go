package libsqltest

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_libsql "oss.indeed.com/go/libsql"
)

// PreparedStatementMock implements libsql.PreparedStatement
type PreparedStatementMock struct {
	t minimock.Tester

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mPreparedStatementMockClose

	funcScan          func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) (err error)
	inspectFuncScan   func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{})
	afterScanCounter  uint64
	beforeScanCounter uint64
	ScanMock          mPreparedStatementMockScan

	funcScanOne          func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) (err error)
	inspectFuncScanOne   func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{})
	afterScanOneCounter  uint64
	beforeScanOneCounter uint64
	ScanOneMock          mPreparedStatementMockScanOne

	funcUpdate          func(ctx context.Context, args ...interface{}) (r1 sql.Result, err error)
	inspectFuncUpdate   func(ctx context.Context, args ...interface{})
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mPreparedStatementMockUpdate

	funcUpdateAndGetLastInsertID          func(ctx context.Context, args ...interface{}) (i1 int64, err error)
	inspectFuncUpdateAndGetLastInsertID   func(ctx context.Context, args ...interface{})
	afterUpdateAndGetLastInsertIDCounter  uint64
	beforeUpdateAndGetLastInsertIDCounter uint64
	UpdateAndGetLastInsertIDMock          mPreparedStatementMockUpdateAndGetLastInsertID

	funcUpdateAndGetRowsAffected          func(ctx context.Context, args ...interface{}) (i1 int64, err error)
	inspectFuncUpdateAndGetRowsAffected   func(ctx context.Context, args ...interface{})
	afterUpdateAndGetRowsAffectedCounter  uint64
	beforeUpdateAndGetRowsAffectedCounter uint64
	UpdateAndGetRowsAffectedMock          mPreparedStatementMockUpdateAndGetRowsAffected
}

// NewPreparedStatementMock returns a mock for libsql.PreparedStatement
func NewPreparedStatementMock(t minimock.Tester) *PreparedStatementMock {
	m := &PreparedStatementMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mPreparedStatementMockClose{mock: m}

	m.ScanMock = mPreparedStatementMockScan{mock: m}
	m.ScanMock.callArgs = []*PreparedStatementMockScanParams{}

	m.ScanOneMock = mPreparedStatementMockScanOne{mock: m}
	m.ScanOneMock.callArgs = []*PreparedStatementMockScanOneParams{}

	m.UpdateMock = mPreparedStatementMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*PreparedStatementMockUpdateParams{}

	m.UpdateAndGetLastInsertIDMock = mPreparedStatementMockUpdateAndGetLastInsertID{mock: m}
	m.UpdateAndGetLastInsertIDMock.callArgs = []*PreparedStatementMockUpdateAndGetLastInsertIDParams{}

	m.UpdateAndGetRowsAffectedMock = mPreparedStatementMockUpdateAndGetRowsAffected{mock: m}
	m.UpdateAndGetRowsAffectedMock.callArgs = []*PreparedStatementMockUpdateAndGetRowsAffectedParams{}

	return m
}

type mPreparedStatementMockClose struct {
	mock               *PreparedStatementMock
	defaultExpectation *PreparedStatementMockCloseExpectation
	expectations       []*PreparedStatementMockCloseExpectation
}

// PreparedStatementMockCloseExpectation specifies expectation struct of the PreparedStatement.Close
type PreparedStatementMockCloseExpectation struct {
	mock *PreparedStatementMock

	results *PreparedStatementMockCloseResults
	Counter uint64
}

// PreparedStatementMockCloseResults contains results of the PreparedStatement.Close
type PreparedStatementMockCloseResults struct {
	err error
}

// Expect sets up expected params for PreparedStatement.Close
func (mmClose *mPreparedStatementMockClose) Expect() *mPreparedStatementMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("PreparedStatementMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &PreparedStatementMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the PreparedStatement.Close
func (mmClose *mPreparedStatementMockClose) Inspect(f func()) *mPreparedStatementMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for PreparedStatementMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by PreparedStatement.Close
func (mmClose *mPreparedStatementMockClose) Return(err error) *PreparedStatementMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("PreparedStatementMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &PreparedStatementMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &PreparedStatementMockCloseResults{err}
	return mmClose.mock
}

//Set uses given function f to mock the PreparedStatement.Close method
func (mmClose *mPreparedStatementMockClose) Set(f func() (err error)) *PreparedStatementMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the PreparedStatement.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the PreparedStatement.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements libsql.PreparedStatement
func (mmClose *PreparedStatementMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the PreparedStatementMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to PreparedStatementMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished PreparedStatementMock.Close invocations
func (mmClose *PreparedStatementMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of PreparedStatementMock.Close invocations
func (mmClose *PreparedStatementMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *PreparedStatementMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *PreparedStatementMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PreparedStatementMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.Close")
	}
}

type mPreparedStatementMockScan struct {
	mock               *PreparedStatementMock
	defaultExpectation *PreparedStatementMockScanExpectation
	expectations       []*PreparedStatementMockScanExpectation

	callArgs []*PreparedStatementMockScanParams
	mutex    sync.RWMutex
}

// PreparedStatementMockScanExpectation specifies expectation struct of the PreparedStatement.Scan
type PreparedStatementMockScanExpectation struct {
	mock    *PreparedStatementMock
	params  *PreparedStatementMockScanParams
	results *PreparedStatementMockScanResults
	Counter uint64
}

// PreparedStatementMockScanParams contains parameters of the PreparedStatement.Scan
type PreparedStatementMockScanParams struct {
	ctx     context.Context
	scanner mm_libsql.RowScanner
	args    []interface{}
}

// PreparedStatementMockScanResults contains results of the PreparedStatement.Scan
type PreparedStatementMockScanResults struct {
	err error
}

// Expect sets up expected params for PreparedStatement.Scan
func (mmScan *mPreparedStatementMockScan) Expect(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) *mPreparedStatementMockScan {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("PreparedStatementMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &PreparedStatementMockScanExpectation{}
	}

	mmScan.defaultExpectation.params = &PreparedStatementMockScanParams{ctx, scanner, args}
	for _, e := range mmScan.expectations {
		if minimock.Equal(e.params, mmScan.defaultExpectation.params) {
			mmScan.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmScan.defaultExpectation.params)
		}
	}

	return mmScan
}

// Inspect accepts an inspector function that has same arguments as the PreparedStatement.Scan
func (mmScan *mPreparedStatementMockScan) Inspect(f func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{})) *mPreparedStatementMockScan {
	if mmScan.mock.inspectFuncScan != nil {
		mmScan.mock.t.Fatalf("Inspect function is already set for PreparedStatementMock.Scan")
	}

	mmScan.mock.inspectFuncScan = f

	return mmScan
}

// Return sets up results that will be returned by PreparedStatement.Scan
func (mmScan *mPreparedStatementMockScan) Return(err error) *PreparedStatementMock {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("PreparedStatementMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &PreparedStatementMockScanExpectation{mock: mmScan.mock}
	}
	mmScan.defaultExpectation.results = &PreparedStatementMockScanResults{err}
	return mmScan.mock
}

//Set uses given function f to mock the PreparedStatement.Scan method
func (mmScan *mPreparedStatementMockScan) Set(f func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) (err error)) *PreparedStatementMock {
	if mmScan.defaultExpectation != nil {
		mmScan.mock.t.Fatalf("Default expectation is already set for the PreparedStatement.Scan method")
	}

	if len(mmScan.expectations) > 0 {
		mmScan.mock.t.Fatalf("Some expectations are already set for the PreparedStatement.Scan method")
	}

	mmScan.mock.funcScan = f
	return mmScan.mock
}

// When sets expectation for the PreparedStatement.Scan which will trigger the result defined by the following
// Then helper
func (mmScan *mPreparedStatementMockScan) When(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) *PreparedStatementMockScanExpectation {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("PreparedStatementMock.Scan mock is already set by Set")
	}

	expectation := &PreparedStatementMockScanExpectation{
		mock:   mmScan.mock,
		params: &PreparedStatementMockScanParams{ctx, scanner, args},
	}
	mmScan.expectations = append(mmScan.expectations, expectation)
	return expectation
}

// Then sets up PreparedStatement.Scan return parameters for the expectation previously defined by the When method
func (e *PreparedStatementMockScanExpectation) Then(err error) *PreparedStatementMock {
	e.results = &PreparedStatementMockScanResults{err}
	return e.mock
}

// Scan implements libsql.PreparedStatement
func (mmScan *PreparedStatementMock) Scan(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&mmScan.beforeScanCounter, 1)
	defer mm_atomic.AddUint64(&mmScan.afterScanCounter, 1)

	if mmScan.inspectFuncScan != nil {
		mmScan.inspectFuncScan(ctx, scanner, args...)
	}

	mm_params := &PreparedStatementMockScanParams{ctx, scanner, args}

	// Record call args
	mmScan.ScanMock.mutex.Lock()
	mmScan.ScanMock.callArgs = append(mmScan.ScanMock.callArgs, mm_params)
	mmScan.ScanMock.mutex.Unlock()

	for _, e := range mmScan.ScanMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmScan.ScanMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmScan.ScanMock.defaultExpectation.Counter, 1)
		mm_want := mmScan.ScanMock.defaultExpectation.params
		mm_got := PreparedStatementMockScanParams{ctx, scanner, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmScan.t.Errorf("PreparedStatementMock.Scan got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmScan.ScanMock.defaultExpectation.results
		if mm_results == nil {
			mmScan.t.Fatal("No results are set for the PreparedStatementMock.Scan")
		}
		return (*mm_results).err
	}
	if mmScan.funcScan != nil {
		return mmScan.funcScan(ctx, scanner, args...)
	}
	mmScan.t.Fatalf("Unexpected call to PreparedStatementMock.Scan. %v %v %v", ctx, scanner, args)
	return
}

// ScanAfterCounter returns a count of finished PreparedStatementMock.Scan invocations
func (mmScan *PreparedStatementMock) ScanAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScan.afterScanCounter)
}

// ScanBeforeCounter returns a count of PreparedStatementMock.Scan invocations
func (mmScan *PreparedStatementMock) ScanBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScan.beforeScanCounter)
}

// Calls returns a list of arguments used in each call to PreparedStatementMock.Scan.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmScan *mPreparedStatementMockScan) Calls() []*PreparedStatementMockScanParams {
	mmScan.mutex.RLock()

	argCopy := make([]*PreparedStatementMockScanParams, len(mmScan.callArgs))
	copy(argCopy, mmScan.callArgs)

	mmScan.mutex.RUnlock()

	return argCopy
}

// MinimockScanDone returns true if the count of the Scan invocations corresponds
// the number of defined expectations
func (m *PreparedStatementMock) MinimockScanDone() bool {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanInspect logs each unmet expectation
func (m *PreparedStatementMock) MinimockScanInspect() {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PreparedStatementMock.Scan with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		if m.ScanMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PreparedStatementMock.Scan")
		} else {
			m.t.Errorf("Expected call to PreparedStatementMock.Scan with params: %#v", *m.ScanMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.Scan")
	}
}

type mPreparedStatementMockScanOne struct {
	mock               *PreparedStatementMock
	defaultExpectation *PreparedStatementMockScanOneExpectation
	expectations       []*PreparedStatementMockScanOneExpectation

	callArgs []*PreparedStatementMockScanOneParams
	mutex    sync.RWMutex
}

// PreparedStatementMockScanOneExpectation specifies expectation struct of the PreparedStatement.ScanOne
type PreparedStatementMockScanOneExpectation struct {
	mock    *PreparedStatementMock
	params  *PreparedStatementMockScanOneParams
	results *PreparedStatementMockScanOneResults
	Counter uint64
}

// PreparedStatementMockScanOneParams contains parameters of the PreparedStatement.ScanOne
type PreparedStatementMockScanOneParams struct {
	ctx     context.Context
	scanner mm_libsql.RowScanner
	args    []interface{}
}

// PreparedStatementMockScanOneResults contains results of the PreparedStatement.ScanOne
type PreparedStatementMockScanOneResults struct {
	err error
}

// Expect sets up expected params for PreparedStatement.ScanOne
func (mmScanOne *mPreparedStatementMockScanOne) Expect(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) *mPreparedStatementMockScanOne {
	if mmScanOne.mock.funcScanOne != nil {
		mmScanOne.mock.t.Fatalf("PreparedStatementMock.ScanOne mock is already set by Set")
	}

	if mmScanOne.defaultExpectation == nil {
		mmScanOne.defaultExpectation = &PreparedStatementMockScanOneExpectation{}
	}

	mmScanOne.defaultExpectation.params = &PreparedStatementMockScanOneParams{ctx, scanner, args}
	for _, e := range mmScanOne.expectations {
		if minimock.Equal(e.params, mmScanOne.defaultExpectation.params) {
			mmScanOne.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmScanOne.defaultExpectation.params)
		}
	}

	return mmScanOne
}

// Inspect accepts an inspector function that has same arguments as the PreparedStatement.ScanOne
func (mmScanOne *mPreparedStatementMockScanOne) Inspect(f func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{})) *mPreparedStatementMockScanOne {
	if mmScanOne.mock.inspectFuncScanOne != nil {
		mmScanOne.mock.t.Fatalf("Inspect function is already set for PreparedStatementMock.ScanOne")
	}

	mmScanOne.mock.inspectFuncScanOne = f

	return mmScanOne
}

// Return sets up results that will be returned by PreparedStatement.ScanOne
func (mmScanOne *mPreparedStatementMockScanOne) Return(err error) *PreparedStatementMock {
	if mmScanOne.mock.funcScanOne != nil {
		mmScanOne.mock.t.Fatalf("PreparedStatementMock.ScanOne mock is already set by Set")
	}

	if mmScanOne.defaultExpectation == nil {
		mmScanOne.defaultExpectation = &PreparedStatementMockScanOneExpectation{mock: mmScanOne.mock}
	}
	mmScanOne.defaultExpectation.results = &PreparedStatementMockScanOneResults{err}
	return mmScanOne.mock
}

//Set uses given function f to mock the PreparedStatement.ScanOne method
func (mmScanOne *mPreparedStatementMockScanOne) Set(f func(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) (err error)) *PreparedStatementMock {
	if mmScanOne.defaultExpectation != nil {
		mmScanOne.mock.t.Fatalf("Default expectation is already set for the PreparedStatement.ScanOne method")
	}

	if len(mmScanOne.expectations) > 0 {
		mmScanOne.mock.t.Fatalf("Some expectations are already set for the PreparedStatement.ScanOne method")
	}

	mmScanOne.mock.funcScanOne = f
	return mmScanOne.mock
}

// When sets expectation for the PreparedStatement.ScanOne which will trigger the result defined by the following
// Then helper
func (mmScanOne *mPreparedStatementMockScanOne) When(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) *PreparedStatementMockScanOneExpectation {
	if mmScanOne.mock.funcScanOne != nil {
		mmScanOne.mock.t.Fatalf("PreparedStatementMock.ScanOne mock is already set by Set")
	}

	expectation := &PreparedStatementMockScanOneExpectation{
		mock:   mmScanOne.mock,
		params: &PreparedStatementMockScanOneParams{ctx, scanner, args},
	}
	mmScanOne.expectations = append(mmScanOne.expectations, expectation)
	return expectation
}

// Then sets up PreparedStatement.ScanOne return parameters for the expectation previously defined by the When method
func (e *PreparedStatementMockScanOneExpectation) Then(err error) *PreparedStatementMock {
	e.results = &PreparedStatementMockScanOneResults{err}
	return e.mock
}

// ScanOne implements libsql.PreparedStatement
func (mmScanOne *PreparedStatementMock) ScanOne(ctx context.Context, scanner mm_libsql.RowScanner, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&mmScanOne.beforeScanOneCounter, 1)
	defer mm_atomic.AddUint64(&mmScanOne.afterScanOneCounter, 1)

	if mmScanOne.inspectFuncScanOne != nil {
		mmScanOne.inspectFuncScanOne(ctx, scanner, args...)
	}

	mm_params := &PreparedStatementMockScanOneParams{ctx, scanner, args}

	// Record call args
	mmScanOne.ScanOneMock.mutex.Lock()
	mmScanOne.ScanOneMock.callArgs = append(mmScanOne.ScanOneMock.callArgs, mm_params)
	mmScanOne.ScanOneMock.mutex.Unlock()

	for _, e := range mmScanOne.ScanOneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmScanOne.ScanOneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmScanOne.ScanOneMock.defaultExpectation.Counter, 1)
		mm_want := mmScanOne.ScanOneMock.defaultExpectation.params
		mm_got := PreparedStatementMockScanOneParams{ctx, scanner, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmScanOne.t.Errorf("PreparedStatementMock.ScanOne got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmScanOne.ScanOneMock.defaultExpectation.results
		if mm_results == nil {
			mmScanOne.t.Fatal("No results are set for the PreparedStatementMock.ScanOne")
		}
		return (*mm_results).err
	}
	if mmScanOne.funcScanOne != nil {
		return mmScanOne.funcScanOne(ctx, scanner, args...)
	}
	mmScanOne.t.Fatalf("Unexpected call to PreparedStatementMock.ScanOne. %v %v %v", ctx, scanner, args)
	return
}

// ScanOneAfterCounter returns a count of finished PreparedStatementMock.ScanOne invocations
func (mmScanOne *PreparedStatementMock) ScanOneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScanOne.afterScanOneCounter)
}

// ScanOneBeforeCounter returns a count of PreparedStatementMock.ScanOne invocations
func (mmScanOne *PreparedStatementMock) ScanOneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScanOne.beforeScanOneCounter)
}

// Calls returns a list of arguments used in each call to PreparedStatementMock.ScanOne.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmScanOne *mPreparedStatementMockScanOne) Calls() []*PreparedStatementMockScanOneParams {
	mmScanOne.mutex.RLock()

	argCopy := make([]*PreparedStatementMockScanOneParams, len(mmScanOne.callArgs))
	copy(argCopy, mmScanOne.callArgs)

	mmScanOne.mutex.RUnlock()

	return argCopy
}

// MinimockScanOneDone returns true if the count of the ScanOne invocations corresponds
// the number of defined expectations
func (m *PreparedStatementMock) MinimockScanOneDone() bool {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanOneInspect logs each unmet expectation
func (m *PreparedStatementMock) MinimockScanOneInspect() {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PreparedStatementMock.ScanOne with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		if m.ScanOneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PreparedStatementMock.ScanOne")
		} else {
			m.t.Errorf("Expected call to PreparedStatementMock.ScanOne with params: %#v", *m.ScanOneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.ScanOne")
	}
}

type mPreparedStatementMockUpdate struct {
	mock               *PreparedStatementMock
	defaultExpectation *PreparedStatementMockUpdateExpectation
	expectations       []*PreparedStatementMockUpdateExpectation

	callArgs []*PreparedStatementMockUpdateParams
	mutex    sync.RWMutex
}

// PreparedStatementMockUpdateExpectation specifies expectation struct of the PreparedStatement.Update
type PreparedStatementMockUpdateExpectation struct {
	mock    *PreparedStatementMock
	params  *PreparedStatementMockUpdateParams
	results *PreparedStatementMockUpdateResults
	Counter uint64
}

// PreparedStatementMockUpdateParams contains parameters of the PreparedStatement.Update
type PreparedStatementMockUpdateParams struct {
	ctx  context.Context
	args []interface{}
}

// PreparedStatementMockUpdateResults contains results of the PreparedStatement.Update
type PreparedStatementMockUpdateResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for PreparedStatement.Update
func (mmUpdate *mPreparedStatementMockUpdate) Expect(ctx context.Context, args ...interface{}) *mPreparedStatementMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PreparedStatementMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PreparedStatementMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &PreparedStatementMockUpdateParams{ctx, args}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the PreparedStatement.Update
func (mmUpdate *mPreparedStatementMockUpdate) Inspect(f func(ctx context.Context, args ...interface{})) *mPreparedStatementMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for PreparedStatementMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by PreparedStatement.Update
func (mmUpdate *mPreparedStatementMockUpdate) Return(r1 sql.Result, err error) *PreparedStatementMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PreparedStatementMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PreparedStatementMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &PreparedStatementMockUpdateResults{r1, err}
	return mmUpdate.mock
}

//Set uses given function f to mock the PreparedStatement.Update method
func (mmUpdate *mPreparedStatementMockUpdate) Set(f func(ctx context.Context, args ...interface{}) (r1 sql.Result, err error)) *PreparedStatementMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the PreparedStatement.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the PreparedStatement.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the PreparedStatement.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mPreparedStatementMockUpdate) When(ctx context.Context, args ...interface{}) *PreparedStatementMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PreparedStatementMock.Update mock is already set by Set")
	}

	expectation := &PreparedStatementMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &PreparedStatementMockUpdateParams{ctx, args},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up PreparedStatement.Update return parameters for the expectation previously defined by the When method
func (e *PreparedStatementMockUpdateExpectation) Then(r1 sql.Result, err error) *PreparedStatementMock {
	e.results = &PreparedStatementMockUpdateResults{r1, err}
	return e.mock
}

// Update implements libsql.PreparedStatement
func (mmUpdate *PreparedStatementMock) Update(ctx context.Context, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, args...)
	}

	mm_params := &PreparedStatementMockUpdateParams{ctx, args}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := PreparedStatementMockUpdateParams{ctx, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("PreparedStatementMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the PreparedStatementMock.Update")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, args...)
	}
	mmUpdate.t.Fatalf("Unexpected call to PreparedStatementMock.Update. %v %v", ctx, args)
	return
}

// UpdateAfterCounter returns a count of finished PreparedStatementMock.Update invocations
func (mmUpdate *PreparedStatementMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of PreparedStatementMock.Update invocations
func (mmUpdate *PreparedStatementMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to PreparedStatementMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mPreparedStatementMockUpdate) Calls() []*PreparedStatementMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*PreparedStatementMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *PreparedStatementMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *PreparedStatementMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PreparedStatementMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PreparedStatementMock.Update")
		} else {
			m.t.Errorf("Expected call to PreparedStatementMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.Update")
	}
}

type mPreparedStatementMockUpdateAndGetLastInsertID struct {
	mock               *PreparedStatementMock
	defaultExpectation *PreparedStatementMockUpdateAndGetLastInsertIDExpectation
	expectations       []*PreparedStatementMockUpdateAndGetLastInsertIDExpectation

	callArgs []*PreparedStatementMockUpdateAndGetLastInsertIDParams
	mutex    sync.RWMutex
}

// PreparedStatementMockUpdateAndGetLastInsertIDExpectation specifies expectation struct of the PreparedStatement.UpdateAndGetLastInsertID
type PreparedStatementMockUpdateAndGetLastInsertIDExpectation struct {
	mock    *PreparedStatementMock
	params  *PreparedStatementMockUpdateAndGetLastInsertIDParams
	results *PreparedStatementMockUpdateAndGetLastInsertIDResults
	Counter uint64
}

// PreparedStatementMockUpdateAndGetLastInsertIDParams contains parameters of the PreparedStatement.UpdateAndGetLastInsertID
type PreparedStatementMockUpdateAndGetLastInsertIDParams struct {
	ctx  context.Context
	args []interface{}
}

// PreparedStatementMockUpdateAndGetLastInsertIDResults contains results of the PreparedStatement.UpdateAndGetLastInsertID
type PreparedStatementMockUpdateAndGetLastInsertIDResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for PreparedStatement.UpdateAndGetLastInsertID
func (mmUpdateAndGetLastInsertID *mPreparedStatementMockUpdateAndGetLastInsertID) Expect(ctx context.Context, args ...interface{}) *mPreparedStatementMockUpdateAndGetLastInsertID {
	if mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("PreparedStatementMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if mmUpdateAndGetLastInsertID.defaultExpectation == nil {
		mmUpdateAndGetLastInsertID.defaultExpectation = &PreparedStatementMockUpdateAndGetLastInsertIDExpectation{}
	}

	mmUpdateAndGetLastInsertID.defaultExpectation.params = &PreparedStatementMockUpdateAndGetLastInsertIDParams{ctx, args}
	for _, e := range mmUpdateAndGetLastInsertID.expectations {
		if minimock.Equal(e.params, mmUpdateAndGetLastInsertID.defaultExpectation.params) {
			mmUpdateAndGetLastInsertID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateAndGetLastInsertID.defaultExpectation.params)
		}
	}

	return mmUpdateAndGetLastInsertID
}

// Inspect accepts an inspector function that has same arguments as the PreparedStatement.UpdateAndGetLastInsertID
func (mmUpdateAndGetLastInsertID *mPreparedStatementMockUpdateAndGetLastInsertID) Inspect(f func(ctx context.Context, args ...interface{})) *mPreparedStatementMockUpdateAndGetLastInsertID {
	if mmUpdateAndGetLastInsertID.mock.inspectFuncUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("Inspect function is already set for PreparedStatementMock.UpdateAndGetLastInsertID")
	}

	mmUpdateAndGetLastInsertID.mock.inspectFuncUpdateAndGetLastInsertID = f

	return mmUpdateAndGetLastInsertID
}

// Return sets up results that will be returned by PreparedStatement.UpdateAndGetLastInsertID
func (mmUpdateAndGetLastInsertID *mPreparedStatementMockUpdateAndGetLastInsertID) Return(i1 int64, err error) *PreparedStatementMock {
	if mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("PreparedStatementMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if mmUpdateAndGetLastInsertID.defaultExpectation == nil {
		mmUpdateAndGetLastInsertID.defaultExpectation = &PreparedStatementMockUpdateAndGetLastInsertIDExpectation{mock: mmUpdateAndGetLastInsertID.mock}
	}
	mmUpdateAndGetLastInsertID.defaultExpectation.results = &PreparedStatementMockUpdateAndGetLastInsertIDResults{i1, err}
	return mmUpdateAndGetLastInsertID.mock
}

//Set uses given function f to mock the PreparedStatement.UpdateAndGetLastInsertID method
func (mmUpdateAndGetLastInsertID *mPreparedStatementMockUpdateAndGetLastInsertID) Set(f func(ctx context.Context, args ...interface{}) (i1 int64, err error)) *PreparedStatementMock {
	if mmUpdateAndGetLastInsertID.defaultExpectation != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("Default expectation is already set for the PreparedStatement.UpdateAndGetLastInsertID method")
	}

	if len(mmUpdateAndGetLastInsertID.expectations) > 0 {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("Some expectations are already set for the PreparedStatement.UpdateAndGetLastInsertID method")
	}

	mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID = f
	return mmUpdateAndGetLastInsertID.mock
}

// When sets expectation for the PreparedStatement.UpdateAndGetLastInsertID which will trigger the result defined by the following
// Then helper
func (mmUpdateAndGetLastInsertID *mPreparedStatementMockUpdateAndGetLastInsertID) When(ctx context.Context, args ...interface{}) *PreparedStatementMockUpdateAndGetLastInsertIDExpectation {
	if mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("PreparedStatementMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	expectation := &PreparedStatementMockUpdateAndGetLastInsertIDExpectation{
		mock:   mmUpdateAndGetLastInsertID.mock,
		params: &PreparedStatementMockUpdateAndGetLastInsertIDParams{ctx, args},
	}
	mmUpdateAndGetLastInsertID.expectations = append(mmUpdateAndGetLastInsertID.expectations, expectation)
	return expectation
}

// Then sets up PreparedStatement.UpdateAndGetLastInsertID return parameters for the expectation previously defined by the When method
func (e *PreparedStatementMockUpdateAndGetLastInsertIDExpectation) Then(i1 int64, err error) *PreparedStatementMock {
	e.results = &PreparedStatementMockUpdateAndGetLastInsertIDResults{i1, err}
	return e.mock
}

// UpdateAndGetLastInsertID implements libsql.PreparedStatement
func (mmUpdateAndGetLastInsertID *PreparedStatementMock) UpdateAndGetLastInsertID(ctx context.Context, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmUpdateAndGetLastInsertID.beforeUpdateAndGetLastInsertIDCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateAndGetLastInsertID.afterUpdateAndGetLastInsertIDCounter, 1)

	if mmUpdateAndGetLastInsertID.inspectFuncUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.inspectFuncUpdateAndGetLastInsertID(ctx, args...)
	}

	mm_params := &PreparedStatementMockUpdateAndGetLastInsertIDParams{ctx, args}

	// Record call args
	mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.mutex.Lock()
	mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.callArgs = append(mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.callArgs, mm_params)
	mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.mutex.Unlock()

	for _, e := range mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation.params
		mm_got := PreparedStatementMockUpdateAndGetLastInsertIDParams{ctx, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateAndGetLastInsertID.t.Errorf("PreparedStatementMock.UpdateAndGetLastInsertID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateAndGetLastInsertID.t.Fatal("No results are set for the PreparedStatementMock.UpdateAndGetLastInsertID")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmUpdateAndGetLastInsertID.funcUpdateAndGetLastInsertID != nil {
		return mmUpdateAndGetLastInsertID.funcUpdateAndGetLastInsertID(ctx, args...)
	}
	mmUpdateAndGetLastInsertID.t.Fatalf("Unexpected call to PreparedStatementMock.UpdateAndGetLastInsertID. %v %v", ctx, args)
	return
}

// UpdateAndGetLastInsertIDAfterCounter returns a count of finished PreparedStatementMock.UpdateAndGetLastInsertID invocations
func (mmUpdateAndGetLastInsertID *PreparedStatementMock) UpdateAndGetLastInsertIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetLastInsertID.afterUpdateAndGetLastInsertIDCounter)
}

// UpdateAndGetLastInsertIDBeforeCounter returns a count of PreparedStatementMock.UpdateAndGetLastInsertID invocations
func (mmUpdateAndGetLastInsertID *PreparedStatementMock) UpdateAndGetLastInsertIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetLastInsertID.beforeUpdateAndGetLastInsertIDCounter)
}

// Calls returns a list of arguments used in each call to PreparedStatementMock.UpdateAndGetLastInsertID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateAndGetLastInsertID *mPreparedStatementMockUpdateAndGetLastInsertID) Calls() []*PreparedStatementMockUpdateAndGetLastInsertIDParams {
	mmUpdateAndGetLastInsertID.mutex.RLock()

	argCopy := make([]*PreparedStatementMockUpdateAndGetLastInsertIDParams, len(mmUpdateAndGetLastInsertID.callArgs))
	copy(argCopy, mmUpdateAndGetLastInsertID.callArgs)

	mmUpdateAndGetLastInsertID.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateAndGetLastInsertIDDone returns true if the count of the UpdateAndGetLastInsertID invocations corresponds
// the number of defined expectations
func (m *PreparedStatementMock) MinimockUpdateAndGetLastInsertIDDone() bool {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetLastInsertIDInspect logs each unmet expectation
func (m *PreparedStatementMock) MinimockUpdateAndGetLastInsertIDInspect() {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PreparedStatementMock.UpdateAndGetLastInsertID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		if m.UpdateAndGetLastInsertIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PreparedStatementMock.UpdateAndGetLastInsertID")
		} else {
			m.t.Errorf("Expected call to PreparedStatementMock.UpdateAndGetLastInsertID with params: %#v", *m.UpdateAndGetLastInsertIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.UpdateAndGetLastInsertID")
	}
}

type mPreparedStatementMockUpdateAndGetRowsAffected struct {
	mock               *PreparedStatementMock
	defaultExpectation *PreparedStatementMockUpdateAndGetRowsAffectedExpectation
	expectations       []*PreparedStatementMockUpdateAndGetRowsAffectedExpectation

	callArgs []*PreparedStatementMockUpdateAndGetRowsAffectedParams
	mutex    sync.RWMutex
}

// PreparedStatementMockUpdateAndGetRowsAffectedExpectation specifies expectation struct of the PreparedStatement.UpdateAndGetRowsAffected
type PreparedStatementMockUpdateAndGetRowsAffectedExpectation struct {
	mock    *PreparedStatementMock
	params  *PreparedStatementMockUpdateAndGetRowsAffectedParams
	results *PreparedStatementMockUpdateAndGetRowsAffectedResults
	Counter uint64
}

// PreparedStatementMockUpdateAndGetRowsAffectedParams contains parameters of the PreparedStatement.UpdateAndGetRowsAffected
type PreparedStatementMockUpdateAndGetRowsAffectedParams struct {
	ctx  context.Context
	args []interface{}
}

// PreparedStatementMockUpdateAndGetRowsAffectedResults contains results of the PreparedStatement.UpdateAndGetRowsAffected
type PreparedStatementMockUpdateAndGetRowsAffectedResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for PreparedStatement.UpdateAndGetRowsAffected
func (mmUpdateAndGetRowsAffected *mPreparedStatementMockUpdateAndGetRowsAffected) Expect(ctx context.Context, args ...interface{}) *mPreparedStatementMockUpdateAndGetRowsAffected {
	if mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("PreparedStatementMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if mmUpdateAndGetRowsAffected.defaultExpectation == nil {
		mmUpdateAndGetRowsAffected.defaultExpectation = &PreparedStatementMockUpdateAndGetRowsAffectedExpectation{}
	}

	mmUpdateAndGetRowsAffected.defaultExpectation.params = &PreparedStatementMockUpdateAndGetRowsAffectedParams{ctx, args}
	for _, e := range mmUpdateAndGetRowsAffected.expectations {
		if minimock.Equal(e.params, mmUpdateAndGetRowsAffected.defaultExpectation.params) {
			mmUpdateAndGetRowsAffected.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateAndGetRowsAffected.defaultExpectation.params)
		}
	}

	return mmUpdateAndGetRowsAffected
}

// Inspect accepts an inspector function that has same arguments as the PreparedStatement.UpdateAndGetRowsAffected
func (mmUpdateAndGetRowsAffected *mPreparedStatementMockUpdateAndGetRowsAffected) Inspect(f func(ctx context.Context, args ...interface{})) *mPreparedStatementMockUpdateAndGetRowsAffected {
	if mmUpdateAndGetRowsAffected.mock.inspectFuncUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("Inspect function is already set for PreparedStatementMock.UpdateAndGetRowsAffected")
	}

	mmUpdateAndGetRowsAffected.mock.inspectFuncUpdateAndGetRowsAffected = f

	return mmUpdateAndGetRowsAffected
}

// Return sets up results that will be returned by PreparedStatement.UpdateAndGetRowsAffected
func (mmUpdateAndGetRowsAffected *mPreparedStatementMockUpdateAndGetRowsAffected) Return(i1 int64, err error) *PreparedStatementMock {
	if mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("PreparedStatementMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if mmUpdateAndGetRowsAffected.defaultExpectation == nil {
		mmUpdateAndGetRowsAffected.defaultExpectation = &PreparedStatementMockUpdateAndGetRowsAffectedExpectation{mock: mmUpdateAndGetRowsAffected.mock}
	}
	mmUpdateAndGetRowsAffected.defaultExpectation.results = &PreparedStatementMockUpdateAndGetRowsAffectedResults{i1, err}
	return mmUpdateAndGetRowsAffected.mock
}

//Set uses given function f to mock the PreparedStatement.UpdateAndGetRowsAffected method
func (mmUpdateAndGetRowsAffected *mPreparedStatementMockUpdateAndGetRowsAffected) Set(f func(ctx context.Context, args ...interface{}) (i1 int64, err error)) *PreparedStatementMock {
	if mmUpdateAndGetRowsAffected.defaultExpectation != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("Default expectation is already set for the PreparedStatement.UpdateAndGetRowsAffected method")
	}

	if len(mmUpdateAndGetRowsAffected.expectations) > 0 {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("Some expectations are already set for the PreparedStatement.UpdateAndGetRowsAffected method")
	}

	mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected = f
	return mmUpdateAndGetRowsAffected.mock
}

// When sets expectation for the PreparedStatement.UpdateAndGetRowsAffected which will trigger the result defined by the following
// Then helper
func (mmUpdateAndGetRowsAffected *mPreparedStatementMockUpdateAndGetRowsAffected) When(ctx context.Context, args ...interface{}) *PreparedStatementMockUpdateAndGetRowsAffectedExpectation {
	if mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("PreparedStatementMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	expectation := &PreparedStatementMockUpdateAndGetRowsAffectedExpectation{
		mock:   mmUpdateAndGetRowsAffected.mock,
		params: &PreparedStatementMockUpdateAndGetRowsAffectedParams{ctx, args},
	}
	mmUpdateAndGetRowsAffected.expectations = append(mmUpdateAndGetRowsAffected.expectations, expectation)
	return expectation
}

// Then sets up PreparedStatement.UpdateAndGetRowsAffected return parameters for the expectation previously defined by the When method
func (e *PreparedStatementMockUpdateAndGetRowsAffectedExpectation) Then(i1 int64, err error) *PreparedStatementMock {
	e.results = &PreparedStatementMockUpdateAndGetRowsAffectedResults{i1, err}
	return e.mock
}

// UpdateAndGetRowsAffected implements libsql.PreparedStatement
func (mmUpdateAndGetRowsAffected *PreparedStatementMock) UpdateAndGetRowsAffected(ctx context.Context, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmUpdateAndGetRowsAffected.beforeUpdateAndGetRowsAffectedCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateAndGetRowsAffected.afterUpdateAndGetRowsAffectedCounter, 1)

	if mmUpdateAndGetRowsAffected.inspectFuncUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.inspectFuncUpdateAndGetRowsAffected(ctx, args...)
	}

	mm_params := &PreparedStatementMockUpdateAndGetRowsAffectedParams{ctx, args}

	// Record call args
	mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.mutex.Lock()
	mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.callArgs = append(mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.callArgs, mm_params)
	mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.mutex.Unlock()

	for _, e := range mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation.params
		mm_got := PreparedStatementMockUpdateAndGetRowsAffectedParams{ctx, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateAndGetRowsAffected.t.Errorf("PreparedStatementMock.UpdateAndGetRowsAffected got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateAndGetRowsAffected.t.Fatal("No results are set for the PreparedStatementMock.UpdateAndGetRowsAffected")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmUpdateAndGetRowsAffected.funcUpdateAndGetRowsAffected != nil {
		return mmUpdateAndGetRowsAffected.funcUpdateAndGetRowsAffected(ctx, args...)
	}
	mmUpdateAndGetRowsAffected.t.Fatalf("Unexpected call to PreparedStatementMock.UpdateAndGetRowsAffected. %v %v", ctx, args)
	return
}

// UpdateAndGetRowsAffectedAfterCounter returns a count of finished PreparedStatementMock.UpdateAndGetRowsAffected invocations
func (mmUpdateAndGetRowsAffected *PreparedStatementMock) UpdateAndGetRowsAffectedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetRowsAffected.afterUpdateAndGetRowsAffectedCounter)
}

// UpdateAndGetRowsAffectedBeforeCounter returns a count of PreparedStatementMock.UpdateAndGetRowsAffected invocations
func (mmUpdateAndGetRowsAffected *PreparedStatementMock) UpdateAndGetRowsAffectedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetRowsAffected.beforeUpdateAndGetRowsAffectedCounter)
}

// Calls returns a list of arguments used in each call to PreparedStatementMock.UpdateAndGetRowsAffected.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateAndGetRowsAffected *mPreparedStatementMockUpdateAndGetRowsAffected) Calls() []*PreparedStatementMockUpdateAndGetRowsAffectedParams {
	mmUpdateAndGetRowsAffected.mutex.RLock()

	argCopy := make([]*PreparedStatementMockUpdateAndGetRowsAffectedParams, len(mmUpdateAndGetRowsAffected.callArgs))
	copy(argCopy, mmUpdateAndGetRowsAffected.callArgs)

	mmUpdateAndGetRowsAffected.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateAndGetRowsAffectedDone returns true if the count of the UpdateAndGetRowsAffected invocations corresponds
// the number of defined expectations
func (m *PreparedStatementMock) MinimockUpdateAndGetRowsAffectedDone() bool {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetRowsAffectedInspect logs each unmet expectation
func (m *PreparedStatementMock) MinimockUpdateAndGetRowsAffectedInspect() {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PreparedStatementMock.UpdateAndGetRowsAffected with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		if m.UpdateAndGetRowsAffectedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PreparedStatementMock.UpdateAndGetRowsAffected")
		} else {
			m.t.Errorf("Expected call to PreparedStatementMock.UpdateAndGetRowsAffected with params: %#v", *m.UpdateAndGetRowsAffectedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		m.t.Error("Expected call to PreparedStatementMock.UpdateAndGetRowsAffected")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PreparedStatementMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCloseInspect()

		m.MinimockScanInspect()

		m.MinimockScanOneInspect()

		m.MinimockUpdateInspect()

		m.MinimockUpdateAndGetLastInsertIDInspect()

		m.MinimockUpdateAndGetRowsAffectedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PreparedStatementMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PreparedStatementMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockScanDone() &&
		m.MinimockScanOneDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockUpdateAndGetLastInsertIDDone() &&
		m.MinimockUpdateAndGetRowsAffectedDone()
}
