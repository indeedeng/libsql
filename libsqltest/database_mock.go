package libsqltest

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_libsql "oss.indeed.com/go/libsql"
)

// DatabaseMock implements libsql.Database
type DatabaseMock struct {
	t minimock.Tester

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mDatabaseMockClose

	funcPrepareStatement          func(ctx context.Context, sql string) (p1 mm_libsql.PreparedStatement, err error)
	inspectFuncPrepareStatement   func(ctx context.Context, sql string)
	afterPrepareStatementCounter  uint64
	beforePrepareStatementCounter uint64
	PrepareStatementMock          mDatabaseMockPrepareStatement

	funcPrepared          func(ctx context.Context, sql string, work func(mm_libsql.Statement) error) (err error)
	inspectFuncPrepared   func(ctx context.Context, sql string, work func(mm_libsql.Statement) error)
	afterPreparedCounter  uint64
	beforePreparedCounter uint64
	PreparedMock          mDatabaseMockPrepared

	funcScan          func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) (err error)
	inspectFuncScan   func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{})
	afterScanCounter  uint64
	beforeScanCounter uint64
	ScanMock          mDatabaseMockScan

	funcScanOne          func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) (err error)
	inspectFuncScanOne   func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{})
	afterScanOneCounter  uint64
	beforeScanOneCounter uint64
	ScanOneMock          mDatabaseMockScanOne

	funcTransaction          func(ctx context.Context, work func(mm_libsql.Transaction) error) (err error)
	inspectFuncTransaction   func(ctx context.Context, work func(mm_libsql.Transaction) error)
	afterTransactionCounter  uint64
	beforeTransactionCounter uint64
	TransactionMock          mDatabaseMockTransaction

	funcUpdate          func(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error)
	inspectFuncUpdate   func(ctx context.Context, sql string, args ...interface{})
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mDatabaseMockUpdate

	funcUpdateAndGetLastInsertID          func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)
	inspectFuncUpdateAndGetLastInsertID   func(ctx context.Context, sql string, args ...interface{})
	afterUpdateAndGetLastInsertIDCounter  uint64
	beforeUpdateAndGetLastInsertIDCounter uint64
	UpdateAndGetLastInsertIDMock          mDatabaseMockUpdateAndGetLastInsertID

	funcUpdateAndGetRowsAffected          func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)
	inspectFuncUpdateAndGetRowsAffected   func(ctx context.Context, sql string, args ...interface{})
	afterUpdateAndGetRowsAffectedCounter  uint64
	beforeUpdateAndGetRowsAffectedCounter uint64
	UpdateAndGetRowsAffectedMock          mDatabaseMockUpdateAndGetRowsAffected
}

// NewDatabaseMock returns a mock for libsql.Database
func NewDatabaseMock(t minimock.Tester) *DatabaseMock {
	m := &DatabaseMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mDatabaseMockClose{mock: m}

	m.PrepareStatementMock = mDatabaseMockPrepareStatement{mock: m}
	m.PrepareStatementMock.callArgs = []*DatabaseMockPrepareStatementParams{}

	m.PreparedMock = mDatabaseMockPrepared{mock: m}
	m.PreparedMock.callArgs = []*DatabaseMockPreparedParams{}

	m.ScanMock = mDatabaseMockScan{mock: m}
	m.ScanMock.callArgs = []*DatabaseMockScanParams{}

	m.ScanOneMock = mDatabaseMockScanOne{mock: m}
	m.ScanOneMock.callArgs = []*DatabaseMockScanOneParams{}

	m.TransactionMock = mDatabaseMockTransaction{mock: m}
	m.TransactionMock.callArgs = []*DatabaseMockTransactionParams{}

	m.UpdateMock = mDatabaseMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*DatabaseMockUpdateParams{}

	m.UpdateAndGetLastInsertIDMock = mDatabaseMockUpdateAndGetLastInsertID{mock: m}
	m.UpdateAndGetLastInsertIDMock.callArgs = []*DatabaseMockUpdateAndGetLastInsertIDParams{}

	m.UpdateAndGetRowsAffectedMock = mDatabaseMockUpdateAndGetRowsAffected{mock: m}
	m.UpdateAndGetRowsAffectedMock.callArgs = []*DatabaseMockUpdateAndGetRowsAffectedParams{}

	return m
}

type mDatabaseMockClose struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockCloseExpectation
	expectations       []*DatabaseMockCloseExpectation
}

// DatabaseMockCloseExpectation specifies expectation struct of the Database.Close
type DatabaseMockCloseExpectation struct {
	mock *DatabaseMock

	results *DatabaseMockCloseResults
	Counter uint64
}

// DatabaseMockCloseResults contains results of the Database.Close
type DatabaseMockCloseResults struct {
	err error
}

// Expect sets up expected params for Database.Close
func (mmClose *mDatabaseMockClose) Expect() *mDatabaseMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("DatabaseMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &DatabaseMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the Database.Close
func (mmClose *mDatabaseMockClose) Inspect(f func()) *mDatabaseMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for DatabaseMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by Database.Close
func (mmClose *mDatabaseMockClose) Return(err error) *DatabaseMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("DatabaseMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &DatabaseMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &DatabaseMockCloseResults{err}
	return mmClose.mock
}

//Set uses given function f to mock the Database.Close method
func (mmClose *mDatabaseMockClose) Set(f func() (err error)) *DatabaseMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the Database.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the Database.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements libsql.Database
func (mmClose *DatabaseMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the DatabaseMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to DatabaseMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished DatabaseMock.Close invocations
func (mmClose *DatabaseMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of DatabaseMock.Close invocations
func (mmClose *DatabaseMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *DatabaseMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DatabaseMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.Close")
	}
}

type mDatabaseMockPrepareStatement struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockPrepareStatementExpectation
	expectations       []*DatabaseMockPrepareStatementExpectation

	callArgs []*DatabaseMockPrepareStatementParams
	mutex    sync.RWMutex
}

// DatabaseMockPrepareStatementExpectation specifies expectation struct of the Database.PrepareStatement
type DatabaseMockPrepareStatementExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockPrepareStatementParams
	results *DatabaseMockPrepareStatementResults
	Counter uint64
}

// DatabaseMockPrepareStatementParams contains parameters of the Database.PrepareStatement
type DatabaseMockPrepareStatementParams struct {
	ctx context.Context
	sql string
}

// DatabaseMockPrepareStatementResults contains results of the Database.PrepareStatement
type DatabaseMockPrepareStatementResults struct {
	p1  mm_libsql.PreparedStatement
	err error
}

// Expect sets up expected params for Database.PrepareStatement
func (mmPrepareStatement *mDatabaseMockPrepareStatement) Expect(ctx context.Context, sql string) *mDatabaseMockPrepareStatement {
	if mmPrepareStatement.mock.funcPrepareStatement != nil {
		mmPrepareStatement.mock.t.Fatalf("DatabaseMock.PrepareStatement mock is already set by Set")
	}

	if mmPrepareStatement.defaultExpectation == nil {
		mmPrepareStatement.defaultExpectation = &DatabaseMockPrepareStatementExpectation{}
	}

	mmPrepareStatement.defaultExpectation.params = &DatabaseMockPrepareStatementParams{ctx, sql}
	for _, e := range mmPrepareStatement.expectations {
		if minimock.Equal(e.params, mmPrepareStatement.defaultExpectation.params) {
			mmPrepareStatement.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPrepareStatement.defaultExpectation.params)
		}
	}

	return mmPrepareStatement
}

// Inspect accepts an inspector function that has same arguments as the Database.PrepareStatement
func (mmPrepareStatement *mDatabaseMockPrepareStatement) Inspect(f func(ctx context.Context, sql string)) *mDatabaseMockPrepareStatement {
	if mmPrepareStatement.mock.inspectFuncPrepareStatement != nil {
		mmPrepareStatement.mock.t.Fatalf("Inspect function is already set for DatabaseMock.PrepareStatement")
	}

	mmPrepareStatement.mock.inspectFuncPrepareStatement = f

	return mmPrepareStatement
}

// Return sets up results that will be returned by Database.PrepareStatement
func (mmPrepareStatement *mDatabaseMockPrepareStatement) Return(p1 mm_libsql.PreparedStatement, err error) *DatabaseMock {
	if mmPrepareStatement.mock.funcPrepareStatement != nil {
		mmPrepareStatement.mock.t.Fatalf("DatabaseMock.PrepareStatement mock is already set by Set")
	}

	if mmPrepareStatement.defaultExpectation == nil {
		mmPrepareStatement.defaultExpectation = &DatabaseMockPrepareStatementExpectation{mock: mmPrepareStatement.mock}
	}
	mmPrepareStatement.defaultExpectation.results = &DatabaseMockPrepareStatementResults{p1, err}
	return mmPrepareStatement.mock
}

//Set uses given function f to mock the Database.PrepareStatement method
func (mmPrepareStatement *mDatabaseMockPrepareStatement) Set(f func(ctx context.Context, sql string) (p1 mm_libsql.PreparedStatement, err error)) *DatabaseMock {
	if mmPrepareStatement.defaultExpectation != nil {
		mmPrepareStatement.mock.t.Fatalf("Default expectation is already set for the Database.PrepareStatement method")
	}

	if len(mmPrepareStatement.expectations) > 0 {
		mmPrepareStatement.mock.t.Fatalf("Some expectations are already set for the Database.PrepareStatement method")
	}

	mmPrepareStatement.mock.funcPrepareStatement = f
	return mmPrepareStatement.mock
}

// When sets expectation for the Database.PrepareStatement which will trigger the result defined by the following
// Then helper
func (mmPrepareStatement *mDatabaseMockPrepareStatement) When(ctx context.Context, sql string) *DatabaseMockPrepareStatementExpectation {
	if mmPrepareStatement.mock.funcPrepareStatement != nil {
		mmPrepareStatement.mock.t.Fatalf("DatabaseMock.PrepareStatement mock is already set by Set")
	}

	expectation := &DatabaseMockPrepareStatementExpectation{
		mock:   mmPrepareStatement.mock,
		params: &DatabaseMockPrepareStatementParams{ctx, sql},
	}
	mmPrepareStatement.expectations = append(mmPrepareStatement.expectations, expectation)
	return expectation
}

// Then sets up Database.PrepareStatement return parameters for the expectation previously defined by the When method
func (e *DatabaseMockPrepareStatementExpectation) Then(p1 mm_libsql.PreparedStatement, err error) *DatabaseMock {
	e.results = &DatabaseMockPrepareStatementResults{p1, err}
	return e.mock
}

// PrepareStatement implements libsql.Database
func (mmPrepareStatement *DatabaseMock) PrepareStatement(ctx context.Context, sql string) (p1 mm_libsql.PreparedStatement, err error) {
	mm_atomic.AddUint64(&mmPrepareStatement.beforePrepareStatementCounter, 1)
	defer mm_atomic.AddUint64(&mmPrepareStatement.afterPrepareStatementCounter, 1)

	if mmPrepareStatement.inspectFuncPrepareStatement != nil {
		mmPrepareStatement.inspectFuncPrepareStatement(ctx, sql)
	}

	mm_params := &DatabaseMockPrepareStatementParams{ctx, sql}

	// Record call args
	mmPrepareStatement.PrepareStatementMock.mutex.Lock()
	mmPrepareStatement.PrepareStatementMock.callArgs = append(mmPrepareStatement.PrepareStatementMock.callArgs, mm_params)
	mmPrepareStatement.PrepareStatementMock.mutex.Unlock()

	for _, e := range mmPrepareStatement.PrepareStatementMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmPrepareStatement.PrepareStatementMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPrepareStatement.PrepareStatementMock.defaultExpectation.Counter, 1)
		mm_want := mmPrepareStatement.PrepareStatementMock.defaultExpectation.params
		mm_got := DatabaseMockPrepareStatementParams{ctx, sql}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPrepareStatement.t.Errorf("DatabaseMock.PrepareStatement got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPrepareStatement.PrepareStatementMock.defaultExpectation.results
		if mm_results == nil {
			mmPrepareStatement.t.Fatal("No results are set for the DatabaseMock.PrepareStatement")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmPrepareStatement.funcPrepareStatement != nil {
		return mmPrepareStatement.funcPrepareStatement(ctx, sql)
	}
	mmPrepareStatement.t.Fatalf("Unexpected call to DatabaseMock.PrepareStatement. %v %v", ctx, sql)
	return
}

// PrepareStatementAfterCounter returns a count of finished DatabaseMock.PrepareStatement invocations
func (mmPrepareStatement *DatabaseMock) PrepareStatementAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPrepareStatement.afterPrepareStatementCounter)
}

// PrepareStatementBeforeCounter returns a count of DatabaseMock.PrepareStatement invocations
func (mmPrepareStatement *DatabaseMock) PrepareStatementBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPrepareStatement.beforePrepareStatementCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.PrepareStatement.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPrepareStatement *mDatabaseMockPrepareStatement) Calls() []*DatabaseMockPrepareStatementParams {
	mmPrepareStatement.mutex.RLock()

	argCopy := make([]*DatabaseMockPrepareStatementParams, len(mmPrepareStatement.callArgs))
	copy(argCopy, mmPrepareStatement.callArgs)

	mmPrepareStatement.mutex.RUnlock()

	return argCopy
}

// MinimockPrepareStatementDone returns true if the count of the PrepareStatement invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockPrepareStatementDone() bool {
	for _, e := range m.PrepareStatementMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PrepareStatementMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPrepareStatementCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepareStatement != nil && mm_atomic.LoadUint64(&m.afterPrepareStatementCounter) < 1 {
		return false
	}
	return true
}

// MinimockPrepareStatementInspect logs each unmet expectation
func (m *DatabaseMock) MinimockPrepareStatementInspect() {
	for _, e := range m.PrepareStatementMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.PrepareStatement with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PrepareStatementMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPrepareStatementCounter) < 1 {
		if m.PrepareStatementMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.PrepareStatement")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.PrepareStatement with params: %#v", *m.PrepareStatementMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepareStatement != nil && mm_atomic.LoadUint64(&m.afterPrepareStatementCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.PrepareStatement")
	}
}

type mDatabaseMockPrepared struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockPreparedExpectation
	expectations       []*DatabaseMockPreparedExpectation

	callArgs []*DatabaseMockPreparedParams
	mutex    sync.RWMutex
}

// DatabaseMockPreparedExpectation specifies expectation struct of the Database.Prepared
type DatabaseMockPreparedExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockPreparedParams
	results *DatabaseMockPreparedResults
	Counter uint64
}

// DatabaseMockPreparedParams contains parameters of the Database.Prepared
type DatabaseMockPreparedParams struct {
	ctx  context.Context
	sql  string
	work func(mm_libsql.Statement) error
}

// DatabaseMockPreparedResults contains results of the Database.Prepared
type DatabaseMockPreparedResults struct {
	err error
}

// Expect sets up expected params for Database.Prepared
func (mmPrepared *mDatabaseMockPrepared) Expect(ctx context.Context, sql string, work func(mm_libsql.Statement) error) *mDatabaseMockPrepared {
	if mmPrepared.mock.funcPrepared != nil {
		mmPrepared.mock.t.Fatalf("DatabaseMock.Prepared mock is already set by Set")
	}

	if mmPrepared.defaultExpectation == nil {
		mmPrepared.defaultExpectation = &DatabaseMockPreparedExpectation{}
	}

	mmPrepared.defaultExpectation.params = &DatabaseMockPreparedParams{ctx, sql, work}
	for _, e := range mmPrepared.expectations {
		if minimock.Equal(e.params, mmPrepared.defaultExpectation.params) {
			mmPrepared.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPrepared.defaultExpectation.params)
		}
	}

	return mmPrepared
}

// Inspect accepts an inspector function that has same arguments as the Database.Prepared
func (mmPrepared *mDatabaseMockPrepared) Inspect(f func(ctx context.Context, sql string, work func(mm_libsql.Statement) error)) *mDatabaseMockPrepared {
	if mmPrepared.mock.inspectFuncPrepared != nil {
		mmPrepared.mock.t.Fatalf("Inspect function is already set for DatabaseMock.Prepared")
	}

	mmPrepared.mock.inspectFuncPrepared = f

	return mmPrepared
}

// Return sets up results that will be returned by Database.Prepared
func (mmPrepared *mDatabaseMockPrepared) Return(err error) *DatabaseMock {
	if mmPrepared.mock.funcPrepared != nil {
		mmPrepared.mock.t.Fatalf("DatabaseMock.Prepared mock is already set by Set")
	}

	if mmPrepared.defaultExpectation == nil {
		mmPrepared.defaultExpectation = &DatabaseMockPreparedExpectation{mock: mmPrepared.mock}
	}
	mmPrepared.defaultExpectation.results = &DatabaseMockPreparedResults{err}
	return mmPrepared.mock
}

//Set uses given function f to mock the Database.Prepared method
func (mmPrepared *mDatabaseMockPrepared) Set(f func(ctx context.Context, sql string, work func(mm_libsql.Statement) error) (err error)) *DatabaseMock {
	if mmPrepared.defaultExpectation != nil {
		mmPrepared.mock.t.Fatalf("Default expectation is already set for the Database.Prepared method")
	}

	if len(mmPrepared.expectations) > 0 {
		mmPrepared.mock.t.Fatalf("Some expectations are already set for the Database.Prepared method")
	}

	mmPrepared.mock.funcPrepared = f
	return mmPrepared.mock
}

// When sets expectation for the Database.Prepared which will trigger the result defined by the following
// Then helper
func (mmPrepared *mDatabaseMockPrepared) When(ctx context.Context, sql string, work func(mm_libsql.Statement) error) *DatabaseMockPreparedExpectation {
	if mmPrepared.mock.funcPrepared != nil {
		mmPrepared.mock.t.Fatalf("DatabaseMock.Prepared mock is already set by Set")
	}

	expectation := &DatabaseMockPreparedExpectation{
		mock:   mmPrepared.mock,
		params: &DatabaseMockPreparedParams{ctx, sql, work},
	}
	mmPrepared.expectations = append(mmPrepared.expectations, expectation)
	return expectation
}

// Then sets up Database.Prepared return parameters for the expectation previously defined by the When method
func (e *DatabaseMockPreparedExpectation) Then(err error) *DatabaseMock {
	e.results = &DatabaseMockPreparedResults{err}
	return e.mock
}

// Prepared implements libsql.Database
func (mmPrepared *DatabaseMock) Prepared(ctx context.Context, sql string, work func(mm_libsql.Statement) error) (err error) {
	mm_atomic.AddUint64(&mmPrepared.beforePreparedCounter, 1)
	defer mm_atomic.AddUint64(&mmPrepared.afterPreparedCounter, 1)

	if mmPrepared.inspectFuncPrepared != nil {
		mmPrepared.inspectFuncPrepared(ctx, sql, work)
	}

	mm_params := &DatabaseMockPreparedParams{ctx, sql, work}

	// Record call args
	mmPrepared.PreparedMock.mutex.Lock()
	mmPrepared.PreparedMock.callArgs = append(mmPrepared.PreparedMock.callArgs, mm_params)
	mmPrepared.PreparedMock.mutex.Unlock()

	for _, e := range mmPrepared.PreparedMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPrepared.PreparedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPrepared.PreparedMock.defaultExpectation.Counter, 1)
		mm_want := mmPrepared.PreparedMock.defaultExpectation.params
		mm_got := DatabaseMockPreparedParams{ctx, sql, work}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPrepared.t.Errorf("DatabaseMock.Prepared got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPrepared.PreparedMock.defaultExpectation.results
		if mm_results == nil {
			mmPrepared.t.Fatal("No results are set for the DatabaseMock.Prepared")
		}
		return (*mm_results).err
	}
	if mmPrepared.funcPrepared != nil {
		return mmPrepared.funcPrepared(ctx, sql, work)
	}
	mmPrepared.t.Fatalf("Unexpected call to DatabaseMock.Prepared. %v %v %v", ctx, sql, work)
	return
}

// PreparedAfterCounter returns a count of finished DatabaseMock.Prepared invocations
func (mmPrepared *DatabaseMock) PreparedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPrepared.afterPreparedCounter)
}

// PreparedBeforeCounter returns a count of DatabaseMock.Prepared invocations
func (mmPrepared *DatabaseMock) PreparedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPrepared.beforePreparedCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.Prepared.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPrepared *mDatabaseMockPrepared) Calls() []*DatabaseMockPreparedParams {
	mmPrepared.mutex.RLock()

	argCopy := make([]*DatabaseMockPreparedParams, len(mmPrepared.callArgs))
	copy(argCopy, mmPrepared.callArgs)

	mmPrepared.mutex.RUnlock()

	return argCopy
}

// MinimockPreparedDone returns true if the count of the Prepared invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockPreparedDone() bool {
	for _, e := range m.PreparedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PreparedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepared != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		return false
	}
	return true
}

// MinimockPreparedInspect logs each unmet expectation
func (m *DatabaseMock) MinimockPreparedInspect() {
	for _, e := range m.PreparedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.Prepared with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PreparedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		if m.PreparedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.Prepared")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.Prepared with params: %#v", *m.PreparedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepared != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.Prepared")
	}
}

type mDatabaseMockScan struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockScanExpectation
	expectations       []*DatabaseMockScanExpectation

	callArgs []*DatabaseMockScanParams
	mutex    sync.RWMutex
}

// DatabaseMockScanExpectation specifies expectation struct of the Database.Scan
type DatabaseMockScanExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockScanParams
	results *DatabaseMockScanResults
	Counter uint64
}

// DatabaseMockScanParams contains parameters of the Database.Scan
type DatabaseMockScanParams struct {
	ctx     context.Context
	scanner mm_libsql.RowScanner
	sql     string
	args    []interface{}
}

// DatabaseMockScanResults contains results of the Database.Scan
type DatabaseMockScanResults struct {
	err error
}

// Expect sets up expected params for Database.Scan
func (mmScan *mDatabaseMockScan) Expect(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) *mDatabaseMockScan {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("DatabaseMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &DatabaseMockScanExpectation{}
	}

	mmScan.defaultExpectation.params = &DatabaseMockScanParams{ctx, scanner, sql, args}
	for _, e := range mmScan.expectations {
		if minimock.Equal(e.params, mmScan.defaultExpectation.params) {
			mmScan.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmScan.defaultExpectation.params)
		}
	}

	return mmScan
}

// Inspect accepts an inspector function that has same arguments as the Database.Scan
func (mmScan *mDatabaseMockScan) Inspect(f func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{})) *mDatabaseMockScan {
	if mmScan.mock.inspectFuncScan != nil {
		mmScan.mock.t.Fatalf("Inspect function is already set for DatabaseMock.Scan")
	}

	mmScan.mock.inspectFuncScan = f

	return mmScan
}

// Return sets up results that will be returned by Database.Scan
func (mmScan *mDatabaseMockScan) Return(err error) *DatabaseMock {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("DatabaseMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &DatabaseMockScanExpectation{mock: mmScan.mock}
	}
	mmScan.defaultExpectation.results = &DatabaseMockScanResults{err}
	return mmScan.mock
}

//Set uses given function f to mock the Database.Scan method
func (mmScan *mDatabaseMockScan) Set(f func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) (err error)) *DatabaseMock {
	if mmScan.defaultExpectation != nil {
		mmScan.mock.t.Fatalf("Default expectation is already set for the Database.Scan method")
	}

	if len(mmScan.expectations) > 0 {
		mmScan.mock.t.Fatalf("Some expectations are already set for the Database.Scan method")
	}

	mmScan.mock.funcScan = f
	return mmScan.mock
}

// When sets expectation for the Database.Scan which will trigger the result defined by the following
// Then helper
func (mmScan *mDatabaseMockScan) When(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) *DatabaseMockScanExpectation {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("DatabaseMock.Scan mock is already set by Set")
	}

	expectation := &DatabaseMockScanExpectation{
		mock:   mmScan.mock,
		params: &DatabaseMockScanParams{ctx, scanner, sql, args},
	}
	mmScan.expectations = append(mmScan.expectations, expectation)
	return expectation
}

// Then sets up Database.Scan return parameters for the expectation previously defined by the When method
func (e *DatabaseMockScanExpectation) Then(err error) *DatabaseMock {
	e.results = &DatabaseMockScanResults{err}
	return e.mock
}

// Scan implements libsql.Database
func (mmScan *DatabaseMock) Scan(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&mmScan.beforeScanCounter, 1)
	defer mm_atomic.AddUint64(&mmScan.afterScanCounter, 1)

	if mmScan.inspectFuncScan != nil {
		mmScan.inspectFuncScan(ctx, scanner, sql, args...)
	}

	mm_params := &DatabaseMockScanParams{ctx, scanner, sql, args}

	// Record call args
	mmScan.ScanMock.mutex.Lock()
	mmScan.ScanMock.callArgs = append(mmScan.ScanMock.callArgs, mm_params)
	mmScan.ScanMock.mutex.Unlock()

	for _, e := range mmScan.ScanMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmScan.ScanMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmScan.ScanMock.defaultExpectation.Counter, 1)
		mm_want := mmScan.ScanMock.defaultExpectation.params
		mm_got := DatabaseMockScanParams{ctx, scanner, sql, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmScan.t.Errorf("DatabaseMock.Scan got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmScan.ScanMock.defaultExpectation.results
		if mm_results == nil {
			mmScan.t.Fatal("No results are set for the DatabaseMock.Scan")
		}
		return (*mm_results).err
	}
	if mmScan.funcScan != nil {
		return mmScan.funcScan(ctx, scanner, sql, args...)
	}
	mmScan.t.Fatalf("Unexpected call to DatabaseMock.Scan. %v %v %v %v", ctx, scanner, sql, args)
	return
}

// ScanAfterCounter returns a count of finished DatabaseMock.Scan invocations
func (mmScan *DatabaseMock) ScanAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScan.afterScanCounter)
}

// ScanBeforeCounter returns a count of DatabaseMock.Scan invocations
func (mmScan *DatabaseMock) ScanBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScan.beforeScanCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.Scan.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmScan *mDatabaseMockScan) Calls() []*DatabaseMockScanParams {
	mmScan.mutex.RLock()

	argCopy := make([]*DatabaseMockScanParams, len(mmScan.callArgs))
	copy(argCopy, mmScan.callArgs)

	mmScan.mutex.RUnlock()

	return argCopy
}

// MinimockScanDone returns true if the count of the Scan invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockScanDone() bool {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanInspect logs each unmet expectation
func (m *DatabaseMock) MinimockScanInspect() {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.Scan with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		if m.ScanMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.Scan")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.Scan with params: %#v", *m.ScanMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.Scan")
	}
}

type mDatabaseMockScanOne struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockScanOneExpectation
	expectations       []*DatabaseMockScanOneExpectation

	callArgs []*DatabaseMockScanOneParams
	mutex    sync.RWMutex
}

// DatabaseMockScanOneExpectation specifies expectation struct of the Database.ScanOne
type DatabaseMockScanOneExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockScanOneParams
	results *DatabaseMockScanOneResults
	Counter uint64
}

// DatabaseMockScanOneParams contains parameters of the Database.ScanOne
type DatabaseMockScanOneParams struct {
	ctx     context.Context
	scanner mm_libsql.RowScanner
	sql     string
	args    []interface{}
}

// DatabaseMockScanOneResults contains results of the Database.ScanOne
type DatabaseMockScanOneResults struct {
	err error
}

// Expect sets up expected params for Database.ScanOne
func (mmScanOne *mDatabaseMockScanOne) Expect(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) *mDatabaseMockScanOne {
	if mmScanOne.mock.funcScanOne != nil {
		mmScanOne.mock.t.Fatalf("DatabaseMock.ScanOne mock is already set by Set")
	}

	if mmScanOne.defaultExpectation == nil {
		mmScanOne.defaultExpectation = &DatabaseMockScanOneExpectation{}
	}

	mmScanOne.defaultExpectation.params = &DatabaseMockScanOneParams{ctx, scanner, sql, args}
	for _, e := range mmScanOne.expectations {
		if minimock.Equal(e.params, mmScanOne.defaultExpectation.params) {
			mmScanOne.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmScanOne.defaultExpectation.params)
		}
	}

	return mmScanOne
}

// Inspect accepts an inspector function that has same arguments as the Database.ScanOne
func (mmScanOne *mDatabaseMockScanOne) Inspect(f func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{})) *mDatabaseMockScanOne {
	if mmScanOne.mock.inspectFuncScanOne != nil {
		mmScanOne.mock.t.Fatalf("Inspect function is already set for DatabaseMock.ScanOne")
	}

	mmScanOne.mock.inspectFuncScanOne = f

	return mmScanOne
}

// Return sets up results that will be returned by Database.ScanOne
func (mmScanOne *mDatabaseMockScanOne) Return(err error) *DatabaseMock {
	if mmScanOne.mock.funcScanOne != nil {
		mmScanOne.mock.t.Fatalf("DatabaseMock.ScanOne mock is already set by Set")
	}

	if mmScanOne.defaultExpectation == nil {
		mmScanOne.defaultExpectation = &DatabaseMockScanOneExpectation{mock: mmScanOne.mock}
	}
	mmScanOne.defaultExpectation.results = &DatabaseMockScanOneResults{err}
	return mmScanOne.mock
}

//Set uses given function f to mock the Database.ScanOne method
func (mmScanOne *mDatabaseMockScanOne) Set(f func(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) (err error)) *DatabaseMock {
	if mmScanOne.defaultExpectation != nil {
		mmScanOne.mock.t.Fatalf("Default expectation is already set for the Database.ScanOne method")
	}

	if len(mmScanOne.expectations) > 0 {
		mmScanOne.mock.t.Fatalf("Some expectations are already set for the Database.ScanOne method")
	}

	mmScanOne.mock.funcScanOne = f
	return mmScanOne.mock
}

// When sets expectation for the Database.ScanOne which will trigger the result defined by the following
// Then helper
func (mmScanOne *mDatabaseMockScanOne) When(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) *DatabaseMockScanOneExpectation {
	if mmScanOne.mock.funcScanOne != nil {
		mmScanOne.mock.t.Fatalf("DatabaseMock.ScanOne mock is already set by Set")
	}

	expectation := &DatabaseMockScanOneExpectation{
		mock:   mmScanOne.mock,
		params: &DatabaseMockScanOneParams{ctx, scanner, sql, args},
	}
	mmScanOne.expectations = append(mmScanOne.expectations, expectation)
	return expectation
}

// Then sets up Database.ScanOne return parameters for the expectation previously defined by the When method
func (e *DatabaseMockScanOneExpectation) Then(err error) *DatabaseMock {
	e.results = &DatabaseMockScanOneResults{err}
	return e.mock
}

// ScanOne implements libsql.Database
func (mmScanOne *DatabaseMock) ScanOne(ctx context.Context, scanner mm_libsql.RowScanner, sql string, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&mmScanOne.beforeScanOneCounter, 1)
	defer mm_atomic.AddUint64(&mmScanOne.afterScanOneCounter, 1)

	if mmScanOne.inspectFuncScanOne != nil {
		mmScanOne.inspectFuncScanOne(ctx, scanner, sql, args...)
	}

	mm_params := &DatabaseMockScanOneParams{ctx, scanner, sql, args}

	// Record call args
	mmScanOne.ScanOneMock.mutex.Lock()
	mmScanOne.ScanOneMock.callArgs = append(mmScanOne.ScanOneMock.callArgs, mm_params)
	mmScanOne.ScanOneMock.mutex.Unlock()

	for _, e := range mmScanOne.ScanOneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmScanOne.ScanOneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmScanOne.ScanOneMock.defaultExpectation.Counter, 1)
		mm_want := mmScanOne.ScanOneMock.defaultExpectation.params
		mm_got := DatabaseMockScanOneParams{ctx, scanner, sql, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmScanOne.t.Errorf("DatabaseMock.ScanOne got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmScanOne.ScanOneMock.defaultExpectation.results
		if mm_results == nil {
			mmScanOne.t.Fatal("No results are set for the DatabaseMock.ScanOne")
		}
		return (*mm_results).err
	}
	if mmScanOne.funcScanOne != nil {
		return mmScanOne.funcScanOne(ctx, scanner, sql, args...)
	}
	mmScanOne.t.Fatalf("Unexpected call to DatabaseMock.ScanOne. %v %v %v %v", ctx, scanner, sql, args)
	return
}

// ScanOneAfterCounter returns a count of finished DatabaseMock.ScanOne invocations
func (mmScanOne *DatabaseMock) ScanOneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScanOne.afterScanOneCounter)
}

// ScanOneBeforeCounter returns a count of DatabaseMock.ScanOne invocations
func (mmScanOne *DatabaseMock) ScanOneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScanOne.beforeScanOneCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.ScanOne.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmScanOne *mDatabaseMockScanOne) Calls() []*DatabaseMockScanOneParams {
	mmScanOne.mutex.RLock()

	argCopy := make([]*DatabaseMockScanOneParams, len(mmScanOne.callArgs))
	copy(argCopy, mmScanOne.callArgs)

	mmScanOne.mutex.RUnlock()

	return argCopy
}

// MinimockScanOneDone returns true if the count of the ScanOne invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockScanOneDone() bool {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanOneInspect logs each unmet expectation
func (m *DatabaseMock) MinimockScanOneInspect() {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.ScanOne with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		if m.ScanOneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.ScanOne")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.ScanOne with params: %#v", *m.ScanOneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.ScanOne")
	}
}

type mDatabaseMockTransaction struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockTransactionExpectation
	expectations       []*DatabaseMockTransactionExpectation

	callArgs []*DatabaseMockTransactionParams
	mutex    sync.RWMutex
}

// DatabaseMockTransactionExpectation specifies expectation struct of the Database.Transaction
type DatabaseMockTransactionExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockTransactionParams
	results *DatabaseMockTransactionResults
	Counter uint64
}

// DatabaseMockTransactionParams contains parameters of the Database.Transaction
type DatabaseMockTransactionParams struct {
	ctx  context.Context
	work func(mm_libsql.Transaction) error
}

// DatabaseMockTransactionResults contains results of the Database.Transaction
type DatabaseMockTransactionResults struct {
	err error
}

// Expect sets up expected params for Database.Transaction
func (mmTransaction *mDatabaseMockTransaction) Expect(ctx context.Context, work func(mm_libsql.Transaction) error) *mDatabaseMockTransaction {
	if mmTransaction.mock.funcTransaction != nil {
		mmTransaction.mock.t.Fatalf("DatabaseMock.Transaction mock is already set by Set")
	}

	if mmTransaction.defaultExpectation == nil {
		mmTransaction.defaultExpectation = &DatabaseMockTransactionExpectation{}
	}

	mmTransaction.defaultExpectation.params = &DatabaseMockTransactionParams{ctx, work}
	for _, e := range mmTransaction.expectations {
		if minimock.Equal(e.params, mmTransaction.defaultExpectation.params) {
			mmTransaction.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTransaction.defaultExpectation.params)
		}
	}

	return mmTransaction
}

// Inspect accepts an inspector function that has same arguments as the Database.Transaction
func (mmTransaction *mDatabaseMockTransaction) Inspect(f func(ctx context.Context, work func(mm_libsql.Transaction) error)) *mDatabaseMockTransaction {
	if mmTransaction.mock.inspectFuncTransaction != nil {
		mmTransaction.mock.t.Fatalf("Inspect function is already set for DatabaseMock.Transaction")
	}

	mmTransaction.mock.inspectFuncTransaction = f

	return mmTransaction
}

// Return sets up results that will be returned by Database.Transaction
func (mmTransaction *mDatabaseMockTransaction) Return(err error) *DatabaseMock {
	if mmTransaction.mock.funcTransaction != nil {
		mmTransaction.mock.t.Fatalf("DatabaseMock.Transaction mock is already set by Set")
	}

	if mmTransaction.defaultExpectation == nil {
		mmTransaction.defaultExpectation = &DatabaseMockTransactionExpectation{mock: mmTransaction.mock}
	}
	mmTransaction.defaultExpectation.results = &DatabaseMockTransactionResults{err}
	return mmTransaction.mock
}

//Set uses given function f to mock the Database.Transaction method
func (mmTransaction *mDatabaseMockTransaction) Set(f func(ctx context.Context, work func(mm_libsql.Transaction) error) (err error)) *DatabaseMock {
	if mmTransaction.defaultExpectation != nil {
		mmTransaction.mock.t.Fatalf("Default expectation is already set for the Database.Transaction method")
	}

	if len(mmTransaction.expectations) > 0 {
		mmTransaction.mock.t.Fatalf("Some expectations are already set for the Database.Transaction method")
	}

	mmTransaction.mock.funcTransaction = f
	return mmTransaction.mock
}

// When sets expectation for the Database.Transaction which will trigger the result defined by the following
// Then helper
func (mmTransaction *mDatabaseMockTransaction) When(ctx context.Context, work func(mm_libsql.Transaction) error) *DatabaseMockTransactionExpectation {
	if mmTransaction.mock.funcTransaction != nil {
		mmTransaction.mock.t.Fatalf("DatabaseMock.Transaction mock is already set by Set")
	}

	expectation := &DatabaseMockTransactionExpectation{
		mock:   mmTransaction.mock,
		params: &DatabaseMockTransactionParams{ctx, work},
	}
	mmTransaction.expectations = append(mmTransaction.expectations, expectation)
	return expectation
}

// Then sets up Database.Transaction return parameters for the expectation previously defined by the When method
func (e *DatabaseMockTransactionExpectation) Then(err error) *DatabaseMock {
	e.results = &DatabaseMockTransactionResults{err}
	return e.mock
}

// Transaction implements libsql.Database
func (mmTransaction *DatabaseMock) Transaction(ctx context.Context, work func(mm_libsql.Transaction) error) (err error) {
	mm_atomic.AddUint64(&mmTransaction.beforeTransactionCounter, 1)
	defer mm_atomic.AddUint64(&mmTransaction.afterTransactionCounter, 1)

	if mmTransaction.inspectFuncTransaction != nil {
		mmTransaction.inspectFuncTransaction(ctx, work)
	}

	mm_params := &DatabaseMockTransactionParams{ctx, work}

	// Record call args
	mmTransaction.TransactionMock.mutex.Lock()
	mmTransaction.TransactionMock.callArgs = append(mmTransaction.TransactionMock.callArgs, mm_params)
	mmTransaction.TransactionMock.mutex.Unlock()

	for _, e := range mmTransaction.TransactionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmTransaction.TransactionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTransaction.TransactionMock.defaultExpectation.Counter, 1)
		mm_want := mmTransaction.TransactionMock.defaultExpectation.params
		mm_got := DatabaseMockTransactionParams{ctx, work}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTransaction.t.Errorf("DatabaseMock.Transaction got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTransaction.TransactionMock.defaultExpectation.results
		if mm_results == nil {
			mmTransaction.t.Fatal("No results are set for the DatabaseMock.Transaction")
		}
		return (*mm_results).err
	}
	if mmTransaction.funcTransaction != nil {
		return mmTransaction.funcTransaction(ctx, work)
	}
	mmTransaction.t.Fatalf("Unexpected call to DatabaseMock.Transaction. %v %v", ctx, work)
	return
}

// TransactionAfterCounter returns a count of finished DatabaseMock.Transaction invocations
func (mmTransaction *DatabaseMock) TransactionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTransaction.afterTransactionCounter)
}

// TransactionBeforeCounter returns a count of DatabaseMock.Transaction invocations
func (mmTransaction *DatabaseMock) TransactionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTransaction.beforeTransactionCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.Transaction.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTransaction *mDatabaseMockTransaction) Calls() []*DatabaseMockTransactionParams {
	mmTransaction.mutex.RLock()

	argCopy := make([]*DatabaseMockTransactionParams, len(mmTransaction.callArgs))
	copy(argCopy, mmTransaction.callArgs)

	mmTransaction.mutex.RUnlock()

	return argCopy
}

// MinimockTransactionDone returns true if the count of the Transaction invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockTransactionDone() bool {
	for _, e := range m.TransactionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TransactionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTransactionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTransaction != nil && mm_atomic.LoadUint64(&m.afterTransactionCounter) < 1 {
		return false
	}
	return true
}

// MinimockTransactionInspect logs each unmet expectation
func (m *DatabaseMock) MinimockTransactionInspect() {
	for _, e := range m.TransactionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.Transaction with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TransactionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTransactionCounter) < 1 {
		if m.TransactionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.Transaction")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.Transaction with params: %#v", *m.TransactionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTransaction != nil && mm_atomic.LoadUint64(&m.afterTransactionCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.Transaction")
	}
}

type mDatabaseMockUpdate struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockUpdateExpectation
	expectations       []*DatabaseMockUpdateExpectation

	callArgs []*DatabaseMockUpdateParams
	mutex    sync.RWMutex
}

// DatabaseMockUpdateExpectation specifies expectation struct of the Database.Update
type DatabaseMockUpdateExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockUpdateParams
	results *DatabaseMockUpdateResults
	Counter uint64
}

// DatabaseMockUpdateParams contains parameters of the Database.Update
type DatabaseMockUpdateParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// DatabaseMockUpdateResults contains results of the Database.Update
type DatabaseMockUpdateResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for Database.Update
func (mmUpdate *mDatabaseMockUpdate) Expect(ctx context.Context, sql string, args ...interface{}) *mDatabaseMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("DatabaseMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &DatabaseMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &DatabaseMockUpdateParams{ctx, sql, args}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the Database.Update
func (mmUpdate *mDatabaseMockUpdate) Inspect(f func(ctx context.Context, sql string, args ...interface{})) *mDatabaseMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for DatabaseMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by Database.Update
func (mmUpdate *mDatabaseMockUpdate) Return(r1 sql.Result, err error) *DatabaseMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("DatabaseMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &DatabaseMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &DatabaseMockUpdateResults{r1, err}
	return mmUpdate.mock
}

//Set uses given function f to mock the Database.Update method
func (mmUpdate *mDatabaseMockUpdate) Set(f func(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error)) *DatabaseMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the Database.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the Database.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the Database.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mDatabaseMockUpdate) When(ctx context.Context, sql string, args ...interface{}) *DatabaseMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("DatabaseMock.Update mock is already set by Set")
	}

	expectation := &DatabaseMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &DatabaseMockUpdateParams{ctx, sql, args},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up Database.Update return parameters for the expectation previously defined by the When method
func (e *DatabaseMockUpdateExpectation) Then(r1 sql.Result, err error) *DatabaseMock {
	e.results = &DatabaseMockUpdateResults{r1, err}
	return e.mock
}

// Update implements libsql.Database
func (mmUpdate *DatabaseMock) Update(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, sql, args...)
	}

	mm_params := &DatabaseMockUpdateParams{ctx, sql, args}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := DatabaseMockUpdateParams{ctx, sql, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("DatabaseMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the DatabaseMock.Update")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, sql, args...)
	}
	mmUpdate.t.Fatalf("Unexpected call to DatabaseMock.Update. %v %v %v", ctx, sql, args)
	return
}

// UpdateAfterCounter returns a count of finished DatabaseMock.Update invocations
func (mmUpdate *DatabaseMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of DatabaseMock.Update invocations
func (mmUpdate *DatabaseMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mDatabaseMockUpdate) Calls() []*DatabaseMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*DatabaseMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *DatabaseMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.Update")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.Update")
	}
}

type mDatabaseMockUpdateAndGetLastInsertID struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockUpdateAndGetLastInsertIDExpectation
	expectations       []*DatabaseMockUpdateAndGetLastInsertIDExpectation

	callArgs []*DatabaseMockUpdateAndGetLastInsertIDParams
	mutex    sync.RWMutex
}

// DatabaseMockUpdateAndGetLastInsertIDExpectation specifies expectation struct of the Database.UpdateAndGetLastInsertID
type DatabaseMockUpdateAndGetLastInsertIDExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockUpdateAndGetLastInsertIDParams
	results *DatabaseMockUpdateAndGetLastInsertIDResults
	Counter uint64
}

// DatabaseMockUpdateAndGetLastInsertIDParams contains parameters of the Database.UpdateAndGetLastInsertID
type DatabaseMockUpdateAndGetLastInsertIDParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// DatabaseMockUpdateAndGetLastInsertIDResults contains results of the Database.UpdateAndGetLastInsertID
type DatabaseMockUpdateAndGetLastInsertIDResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Database.UpdateAndGetLastInsertID
func (mmUpdateAndGetLastInsertID *mDatabaseMockUpdateAndGetLastInsertID) Expect(ctx context.Context, sql string, args ...interface{}) *mDatabaseMockUpdateAndGetLastInsertID {
	if mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("DatabaseMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if mmUpdateAndGetLastInsertID.defaultExpectation == nil {
		mmUpdateAndGetLastInsertID.defaultExpectation = &DatabaseMockUpdateAndGetLastInsertIDExpectation{}
	}

	mmUpdateAndGetLastInsertID.defaultExpectation.params = &DatabaseMockUpdateAndGetLastInsertIDParams{ctx, sql, args}
	for _, e := range mmUpdateAndGetLastInsertID.expectations {
		if minimock.Equal(e.params, mmUpdateAndGetLastInsertID.defaultExpectation.params) {
			mmUpdateAndGetLastInsertID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateAndGetLastInsertID.defaultExpectation.params)
		}
	}

	return mmUpdateAndGetLastInsertID
}

// Inspect accepts an inspector function that has same arguments as the Database.UpdateAndGetLastInsertID
func (mmUpdateAndGetLastInsertID *mDatabaseMockUpdateAndGetLastInsertID) Inspect(f func(ctx context.Context, sql string, args ...interface{})) *mDatabaseMockUpdateAndGetLastInsertID {
	if mmUpdateAndGetLastInsertID.mock.inspectFuncUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("Inspect function is already set for DatabaseMock.UpdateAndGetLastInsertID")
	}

	mmUpdateAndGetLastInsertID.mock.inspectFuncUpdateAndGetLastInsertID = f

	return mmUpdateAndGetLastInsertID
}

// Return sets up results that will be returned by Database.UpdateAndGetLastInsertID
func (mmUpdateAndGetLastInsertID *mDatabaseMockUpdateAndGetLastInsertID) Return(i1 int64, err error) *DatabaseMock {
	if mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("DatabaseMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if mmUpdateAndGetLastInsertID.defaultExpectation == nil {
		mmUpdateAndGetLastInsertID.defaultExpectation = &DatabaseMockUpdateAndGetLastInsertIDExpectation{mock: mmUpdateAndGetLastInsertID.mock}
	}
	mmUpdateAndGetLastInsertID.defaultExpectation.results = &DatabaseMockUpdateAndGetLastInsertIDResults{i1, err}
	return mmUpdateAndGetLastInsertID.mock
}

//Set uses given function f to mock the Database.UpdateAndGetLastInsertID method
func (mmUpdateAndGetLastInsertID *mDatabaseMockUpdateAndGetLastInsertID) Set(f func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)) *DatabaseMock {
	if mmUpdateAndGetLastInsertID.defaultExpectation != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("Default expectation is already set for the Database.UpdateAndGetLastInsertID method")
	}

	if len(mmUpdateAndGetLastInsertID.expectations) > 0 {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("Some expectations are already set for the Database.UpdateAndGetLastInsertID method")
	}

	mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID = f
	return mmUpdateAndGetLastInsertID.mock
}

// When sets expectation for the Database.UpdateAndGetLastInsertID which will trigger the result defined by the following
// Then helper
func (mmUpdateAndGetLastInsertID *mDatabaseMockUpdateAndGetLastInsertID) When(ctx context.Context, sql string, args ...interface{}) *DatabaseMockUpdateAndGetLastInsertIDExpectation {
	if mmUpdateAndGetLastInsertID.mock.funcUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.mock.t.Fatalf("DatabaseMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	expectation := &DatabaseMockUpdateAndGetLastInsertIDExpectation{
		mock:   mmUpdateAndGetLastInsertID.mock,
		params: &DatabaseMockUpdateAndGetLastInsertIDParams{ctx, sql, args},
	}
	mmUpdateAndGetLastInsertID.expectations = append(mmUpdateAndGetLastInsertID.expectations, expectation)
	return expectation
}

// Then sets up Database.UpdateAndGetLastInsertID return parameters for the expectation previously defined by the When method
func (e *DatabaseMockUpdateAndGetLastInsertIDExpectation) Then(i1 int64, err error) *DatabaseMock {
	e.results = &DatabaseMockUpdateAndGetLastInsertIDResults{i1, err}
	return e.mock
}

// UpdateAndGetLastInsertID implements libsql.Database
func (mmUpdateAndGetLastInsertID *DatabaseMock) UpdateAndGetLastInsertID(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmUpdateAndGetLastInsertID.beforeUpdateAndGetLastInsertIDCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateAndGetLastInsertID.afterUpdateAndGetLastInsertIDCounter, 1)

	if mmUpdateAndGetLastInsertID.inspectFuncUpdateAndGetLastInsertID != nil {
		mmUpdateAndGetLastInsertID.inspectFuncUpdateAndGetLastInsertID(ctx, sql, args...)
	}

	mm_params := &DatabaseMockUpdateAndGetLastInsertIDParams{ctx, sql, args}

	// Record call args
	mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.mutex.Lock()
	mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.callArgs = append(mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.callArgs, mm_params)
	mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.mutex.Unlock()

	for _, e := range mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation.params
		mm_got := DatabaseMockUpdateAndGetLastInsertIDParams{ctx, sql, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateAndGetLastInsertID.t.Errorf("DatabaseMock.UpdateAndGetLastInsertID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateAndGetLastInsertID.UpdateAndGetLastInsertIDMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateAndGetLastInsertID.t.Fatal("No results are set for the DatabaseMock.UpdateAndGetLastInsertID")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmUpdateAndGetLastInsertID.funcUpdateAndGetLastInsertID != nil {
		return mmUpdateAndGetLastInsertID.funcUpdateAndGetLastInsertID(ctx, sql, args...)
	}
	mmUpdateAndGetLastInsertID.t.Fatalf("Unexpected call to DatabaseMock.UpdateAndGetLastInsertID. %v %v %v", ctx, sql, args)
	return
}

// UpdateAndGetLastInsertIDAfterCounter returns a count of finished DatabaseMock.UpdateAndGetLastInsertID invocations
func (mmUpdateAndGetLastInsertID *DatabaseMock) UpdateAndGetLastInsertIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetLastInsertID.afterUpdateAndGetLastInsertIDCounter)
}

// UpdateAndGetLastInsertIDBeforeCounter returns a count of DatabaseMock.UpdateAndGetLastInsertID invocations
func (mmUpdateAndGetLastInsertID *DatabaseMock) UpdateAndGetLastInsertIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetLastInsertID.beforeUpdateAndGetLastInsertIDCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.UpdateAndGetLastInsertID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateAndGetLastInsertID *mDatabaseMockUpdateAndGetLastInsertID) Calls() []*DatabaseMockUpdateAndGetLastInsertIDParams {
	mmUpdateAndGetLastInsertID.mutex.RLock()

	argCopy := make([]*DatabaseMockUpdateAndGetLastInsertIDParams, len(mmUpdateAndGetLastInsertID.callArgs))
	copy(argCopy, mmUpdateAndGetLastInsertID.callArgs)

	mmUpdateAndGetLastInsertID.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateAndGetLastInsertIDDone returns true if the count of the UpdateAndGetLastInsertID invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockUpdateAndGetLastInsertIDDone() bool {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetLastInsertIDInspect logs each unmet expectation
func (m *DatabaseMock) MinimockUpdateAndGetLastInsertIDInspect() {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.UpdateAndGetLastInsertID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		if m.UpdateAndGetLastInsertIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.UpdateAndGetLastInsertID")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.UpdateAndGetLastInsertID with params: %#v", *m.UpdateAndGetLastInsertIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.UpdateAndGetLastInsertID")
	}
}

type mDatabaseMockUpdateAndGetRowsAffected struct {
	mock               *DatabaseMock
	defaultExpectation *DatabaseMockUpdateAndGetRowsAffectedExpectation
	expectations       []*DatabaseMockUpdateAndGetRowsAffectedExpectation

	callArgs []*DatabaseMockUpdateAndGetRowsAffectedParams
	mutex    sync.RWMutex
}

// DatabaseMockUpdateAndGetRowsAffectedExpectation specifies expectation struct of the Database.UpdateAndGetRowsAffected
type DatabaseMockUpdateAndGetRowsAffectedExpectation struct {
	mock    *DatabaseMock
	params  *DatabaseMockUpdateAndGetRowsAffectedParams
	results *DatabaseMockUpdateAndGetRowsAffectedResults
	Counter uint64
}

// DatabaseMockUpdateAndGetRowsAffectedParams contains parameters of the Database.UpdateAndGetRowsAffected
type DatabaseMockUpdateAndGetRowsAffectedParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// DatabaseMockUpdateAndGetRowsAffectedResults contains results of the Database.UpdateAndGetRowsAffected
type DatabaseMockUpdateAndGetRowsAffectedResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Database.UpdateAndGetRowsAffected
func (mmUpdateAndGetRowsAffected *mDatabaseMockUpdateAndGetRowsAffected) Expect(ctx context.Context, sql string, args ...interface{}) *mDatabaseMockUpdateAndGetRowsAffected {
	if mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("DatabaseMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if mmUpdateAndGetRowsAffected.defaultExpectation == nil {
		mmUpdateAndGetRowsAffected.defaultExpectation = &DatabaseMockUpdateAndGetRowsAffectedExpectation{}
	}

	mmUpdateAndGetRowsAffected.defaultExpectation.params = &DatabaseMockUpdateAndGetRowsAffectedParams{ctx, sql, args}
	for _, e := range mmUpdateAndGetRowsAffected.expectations {
		if minimock.Equal(e.params, mmUpdateAndGetRowsAffected.defaultExpectation.params) {
			mmUpdateAndGetRowsAffected.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateAndGetRowsAffected.defaultExpectation.params)
		}
	}

	return mmUpdateAndGetRowsAffected
}

// Inspect accepts an inspector function that has same arguments as the Database.UpdateAndGetRowsAffected
func (mmUpdateAndGetRowsAffected *mDatabaseMockUpdateAndGetRowsAffected) Inspect(f func(ctx context.Context, sql string, args ...interface{})) *mDatabaseMockUpdateAndGetRowsAffected {
	if mmUpdateAndGetRowsAffected.mock.inspectFuncUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("Inspect function is already set for DatabaseMock.UpdateAndGetRowsAffected")
	}

	mmUpdateAndGetRowsAffected.mock.inspectFuncUpdateAndGetRowsAffected = f

	return mmUpdateAndGetRowsAffected
}

// Return sets up results that will be returned by Database.UpdateAndGetRowsAffected
func (mmUpdateAndGetRowsAffected *mDatabaseMockUpdateAndGetRowsAffected) Return(i1 int64, err error) *DatabaseMock {
	if mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("DatabaseMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if mmUpdateAndGetRowsAffected.defaultExpectation == nil {
		mmUpdateAndGetRowsAffected.defaultExpectation = &DatabaseMockUpdateAndGetRowsAffectedExpectation{mock: mmUpdateAndGetRowsAffected.mock}
	}
	mmUpdateAndGetRowsAffected.defaultExpectation.results = &DatabaseMockUpdateAndGetRowsAffectedResults{i1, err}
	return mmUpdateAndGetRowsAffected.mock
}

//Set uses given function f to mock the Database.UpdateAndGetRowsAffected method
func (mmUpdateAndGetRowsAffected *mDatabaseMockUpdateAndGetRowsAffected) Set(f func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)) *DatabaseMock {
	if mmUpdateAndGetRowsAffected.defaultExpectation != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("Default expectation is already set for the Database.UpdateAndGetRowsAffected method")
	}

	if len(mmUpdateAndGetRowsAffected.expectations) > 0 {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("Some expectations are already set for the Database.UpdateAndGetRowsAffected method")
	}

	mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected = f
	return mmUpdateAndGetRowsAffected.mock
}

// When sets expectation for the Database.UpdateAndGetRowsAffected which will trigger the result defined by the following
// Then helper
func (mmUpdateAndGetRowsAffected *mDatabaseMockUpdateAndGetRowsAffected) When(ctx context.Context, sql string, args ...interface{}) *DatabaseMockUpdateAndGetRowsAffectedExpectation {
	if mmUpdateAndGetRowsAffected.mock.funcUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.mock.t.Fatalf("DatabaseMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	expectation := &DatabaseMockUpdateAndGetRowsAffectedExpectation{
		mock:   mmUpdateAndGetRowsAffected.mock,
		params: &DatabaseMockUpdateAndGetRowsAffectedParams{ctx, sql, args},
	}
	mmUpdateAndGetRowsAffected.expectations = append(mmUpdateAndGetRowsAffected.expectations, expectation)
	return expectation
}

// Then sets up Database.UpdateAndGetRowsAffected return parameters for the expectation previously defined by the When method
func (e *DatabaseMockUpdateAndGetRowsAffectedExpectation) Then(i1 int64, err error) *DatabaseMock {
	e.results = &DatabaseMockUpdateAndGetRowsAffectedResults{i1, err}
	return e.mock
}

// UpdateAndGetRowsAffected implements libsql.Database
func (mmUpdateAndGetRowsAffected *DatabaseMock) UpdateAndGetRowsAffected(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmUpdateAndGetRowsAffected.beforeUpdateAndGetRowsAffectedCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateAndGetRowsAffected.afterUpdateAndGetRowsAffectedCounter, 1)

	if mmUpdateAndGetRowsAffected.inspectFuncUpdateAndGetRowsAffected != nil {
		mmUpdateAndGetRowsAffected.inspectFuncUpdateAndGetRowsAffected(ctx, sql, args...)
	}

	mm_params := &DatabaseMockUpdateAndGetRowsAffectedParams{ctx, sql, args}

	// Record call args
	mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.mutex.Lock()
	mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.callArgs = append(mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.callArgs, mm_params)
	mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.mutex.Unlock()

	for _, e := range mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation.params
		mm_got := DatabaseMockUpdateAndGetRowsAffectedParams{ctx, sql, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateAndGetRowsAffected.t.Errorf("DatabaseMock.UpdateAndGetRowsAffected got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateAndGetRowsAffected.UpdateAndGetRowsAffectedMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateAndGetRowsAffected.t.Fatal("No results are set for the DatabaseMock.UpdateAndGetRowsAffected")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmUpdateAndGetRowsAffected.funcUpdateAndGetRowsAffected != nil {
		return mmUpdateAndGetRowsAffected.funcUpdateAndGetRowsAffected(ctx, sql, args...)
	}
	mmUpdateAndGetRowsAffected.t.Fatalf("Unexpected call to DatabaseMock.UpdateAndGetRowsAffected. %v %v %v", ctx, sql, args)
	return
}

// UpdateAndGetRowsAffectedAfterCounter returns a count of finished DatabaseMock.UpdateAndGetRowsAffected invocations
func (mmUpdateAndGetRowsAffected *DatabaseMock) UpdateAndGetRowsAffectedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetRowsAffected.afterUpdateAndGetRowsAffectedCounter)
}

// UpdateAndGetRowsAffectedBeforeCounter returns a count of DatabaseMock.UpdateAndGetRowsAffected invocations
func (mmUpdateAndGetRowsAffected *DatabaseMock) UpdateAndGetRowsAffectedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAndGetRowsAffected.beforeUpdateAndGetRowsAffectedCounter)
}

// Calls returns a list of arguments used in each call to DatabaseMock.UpdateAndGetRowsAffected.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateAndGetRowsAffected *mDatabaseMockUpdateAndGetRowsAffected) Calls() []*DatabaseMockUpdateAndGetRowsAffectedParams {
	mmUpdateAndGetRowsAffected.mutex.RLock()

	argCopy := make([]*DatabaseMockUpdateAndGetRowsAffectedParams, len(mmUpdateAndGetRowsAffected.callArgs))
	copy(argCopy, mmUpdateAndGetRowsAffected.callArgs)

	mmUpdateAndGetRowsAffected.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateAndGetRowsAffectedDone returns true if the count of the UpdateAndGetRowsAffected invocations corresponds
// the number of defined expectations
func (m *DatabaseMock) MinimockUpdateAndGetRowsAffectedDone() bool {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetRowsAffectedInspect logs each unmet expectation
func (m *DatabaseMock) MinimockUpdateAndGetRowsAffectedInspect() {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DatabaseMock.UpdateAndGetRowsAffected with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		if m.UpdateAndGetRowsAffectedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DatabaseMock.UpdateAndGetRowsAffected")
		} else {
			m.t.Errorf("Expected call to DatabaseMock.UpdateAndGetRowsAffected with params: %#v", *m.UpdateAndGetRowsAffectedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		m.t.Error("Expected call to DatabaseMock.UpdateAndGetRowsAffected")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DatabaseMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCloseInspect()

		m.MinimockPrepareStatementInspect()

		m.MinimockPreparedInspect()

		m.MinimockScanInspect()

		m.MinimockScanOneInspect()

		m.MinimockTransactionInspect()

		m.MinimockUpdateInspect()

		m.MinimockUpdateAndGetLastInsertIDInspect()

		m.MinimockUpdateAndGetRowsAffectedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DatabaseMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DatabaseMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockPrepareStatementDone() &&
		m.MinimockPreparedDone() &&
		m.MinimockScanDone() &&
		m.MinimockScanOneDone() &&
		m.MinimockTransactionDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockUpdateAndGetLastInsertIDDone() &&
		m.MinimockUpdateAndGetRowsAffectedDone()
}
